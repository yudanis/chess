
import pieces.Chess;
import pieces.Pieces;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.MouseAdapter;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.LineBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author DELL
 */
public class MainPanel extends javax.swing.JPanel {

    /**
     * Creates new form MainPanel
     */
    PiecesTableModel model;
    JTable tblBoard;

    public MainPanel() {
        initComponents();
        this.setLayout(new FlowLayout());
        model = new PiecesTableModel();
        tblBoard = new JTable(model);
        tblBoard.getColumnModel().getColumn(0).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(1).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(2).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(4).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(5).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(6).setCellRenderer(new ColorRenderer());
        tblBoard.getColumnModel().getColumn(7).setCellRenderer(new ColorRenderer());

        tblBoard.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Chess chess = Chess.GetInstance();
                int row = tblBoard.rowAtPoint(evt.getPoint());
                int col = tblBoard.columnAtPoint(evt.getPoint());

                Pieces from = chess.GetSelectedPieces();
                Pieces to = (Pieces) model.getValueAt(row, col);

                if (from == null) {
                    chess.Select(to, row, col);
                } else {
                    String newPos = "" + row + col;
                    if (from.possibleMove.contains(newPos)) {//valid move
                        chess.Move(from, to, "" + row + col);
                        
                    } else {
                        chess.Select(to, row, col);
                    }
                }

                tblBoard.repaint();
            }
        });
        tblBoard.setRowHeight(50);

        // tblBoard.setDefaultRenderer(Pieces.class, new ColorRenderer());
        this.add(new JScrollPane(tblBoard));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 810, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

class ColorRenderer extends JLabel implements TableCellRenderer {

    public ColorRenderer() {
        super.setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

        this.setBorder(null);
        Chess chess = Chess.GetInstance();
        if (chess.GetSelectedPieces() != null) {
            String currPos = "" + row + column;
            if (chess.GetSelectedPieces().possibleMove.contains(currPos)) {
                this.setBorder(new LineBorder(Color.GREEN));
            }
        }
        this.setForeground(Color.WHITE);
        Pieces piece = ((Pieces) value);
        String icon;// = piece.getIcon();

        Color color = new Color(126, 0, 0);
        if (row % 2 != 0 && column % 2 != 0) {
            color = Color.WHITE;
        }

        if (row % 2 == 0 && column % 2 == 0) {
            color = Color.WHITE;
        }
        setBackground(color);

        if (piece != null) {
            icon = piece.getIcon();

            if (icon != null) {
                //ImageIcon img = new ImageIcon(icon);
                BufferedImage img;
                try {
                    img = ImageIO.read(ClassLoader.getSystemResource(icon));
                    this.setIcon(new ImageIcon(img));
                    this.setText("");
                } catch (IOException ex) {
                    Logger.getLogger(ColorRenderer.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                this.setText(piece.toString());
                this.setIcon(null);
            }
        } else {
            this.setText("");
            this.setIcon(null);
        }
        return this;
    }

}

class PiecesTableModel extends AbstractTableModel {

    Chess chess = Chess.GetInstance();

    public PiecesTableModel() {

    }

    @Override
    public int getRowCount() {
        return 8;
    }

    @Override
    public int getColumnCount() {
        return 8;
    }

    @Override
    public String getColumnName(int column) {
        return "" + (char) (97 + column);
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        String key = rowIndex + "" + columnIndex;

        return chess.GetAll().getOrDefault(key, null);

    }

}
